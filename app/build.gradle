apply plugin: 'com.android.application'

//apply plugin: 'com.hiya.jacoco-android'
apply plugin: 'org.sonarqube'
apply plugin: "com.diffplug.gradle.spotless"

apply from: 'jacoco_offline.gradle'

android {
  compileSdkVersion 28
  buildToolsVersion "28.0.3"

  defaultConfig {
    applicationId "tech.gruppone.stalker.app"
    minSdkVersion 21
    //noinspection OldTargetApi
    targetSdkVersion 28
    versionCode 8
    versionName "0.5.2"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    buildConfigField("String", "ADMIN_API_KEY", "\"${ADMIN_API_KEY}\"")
    buildConfigField("String", "SERVER_URL", "\"${SERVER_URL}\"")
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  testOptions {
    unitTests.returnDefaultValues = true
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

      testCoverageEnabled true
    }

    debug {
      testCoverageEnabled true
    }
  }

  lintOptions {
    abortOnError true
    warningsAsErrors true

    checkAllWarnings true
    // use disable to individually remove lint checks that are redundant
    // disable "id1", "id2"

    disable "AnnotationProcessorOnCompilePath"

    //the linter itself says that the unused ids aren't necessarily bad,
    // because they make it easier to work directly on code.
    disable "UnusedIds"

    //we can think about different resolutions for images when this rush is done
    disable "IconDensities"
    disable "ConvertToWebp"
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
  implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

  testImplementation 'junit:junit:4.13'
  testImplementation 'org.mockito:mockito-core:3.3.3'
  testImplementation 'androidx.test:runner:1.2.0'
  testImplementation 'androidx.test:rules:1.2.0'
  testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
  testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
  testImplementation 'android.arch.core:core-testing:1.1.1'

  androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  androidTestImplementation 'androidx.test:runner:1.2.0'
  androidTestImplementation 'androidx.test:rules:1.2.0'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  androidTestImplementation 'org.mockito:mockito-android:3.3.3'

  implementation 'androidx.lifecycle:lifecycle-viewmodel:2.2.0'

  implementation 'com.android.volley:volley:1.1.1'

  implementation 'com.android.support:recyclerview-v7:28.0.0'

  implementation 'com.google.android.gms:play-services-location:17.0.0'

  implementation 'javax.vecmath:vecmath:1.5.2'

  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'

  implementation 'com.google.android.material:material:1.1.0'

  implementation 'com.auth0.android:jwtdecode:2.0.0'

  jacocoAnt 'org.jacoco:org.jacoco.ant:0.8.4:nodeps'
}

jacoco {
  toolVersion = "0.8.4"
}

// TODO how to enforce minimum coverage?

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

//jacocoAndroidUnitTestReport {
//  csv.enabled false
//  html.enabled true
//  xml.enabled true
//}

tasks.findByName('jacocoTestReport').mustRunAfter('test')

project.tasks["check"].dependsOn "jacocoTestReport"

sonarqube {
  properties {
    property "sonar.sourceEncoding", "UTF-8"

    property "sonar.projectName", "stalker-mobile-app"
    property "sonar.projectKey", "GruppOne_stalker-mobile-app"
    property "sonar.organization", "grupp-one"

    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "${env.SONARCLOUD_LOGIN.orNull()}"

    property 'sonar.androidLint.reportPaths', "${buildDir}/reports/lint-results.xml"
    property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacocoXml/jacoco.xml"
  }
}

tasks.findByName('sonarqube').mustRunAfter('lint')
tasks.findByName('sonarqube').mustRunAfter('jacocoTestReport')
tasks.findByName('sonarqube').mustRunAfter('check')

project.tasks["sonarqube"].dependsOn "check"

// ===============================
// = FORMATTING
// ===============================

spotless {
  java {
    target '**/*.java'

    googleJavaFormat("1.7")

    endWithNewline()
    // already set by googleJavaFormat()
    // indentWithSpaces(2)
    paddedCell()
    removeUnusedImports()
    trimTrailingWhitespace()
  }

  encoding 'UTF-8'
  //noinspection GroovyAssignabilityCheck
  lineEndings("UNIX")
}
